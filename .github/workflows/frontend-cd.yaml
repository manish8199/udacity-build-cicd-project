name: Frontend Continuous Deployment

env:
  # Set Node.js Version
  NODE_VERSION: '18.x'
  AWS_REGION: us-east-1     # Update this to your AWS Region
  TF_ACTION_WORKING_DIR: 'terraform' # Update this to your Terraform files directory
  REACT_APP_MOVIE_API_URL: 'http://localhost:5000'


on:
  workflow_dispatch:

  push:
    branches:
      -main

  pull_request:
    branches:
      - main

jobs:

  lintjob:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.7
            

    - name: setup node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: "./starter/frontend/package-lock.json"

    - name: install depedencies
      run: cd ./starter/frontend && npm ci

    - name: run lint
      run: cd ./starter/frontend && npm run lint

    - name: print message
      run: echo "lint build is running"

  testjob:
    runs-on: ubuntu-latest

    steps:
    - name: checkout code
      uses: actions/checkout@v4.1.7

    - name: setup node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: "./starter/frontend/package-lock.json"

    - name: install depedencies
      run: cd ./starter/frontend &&  npm ci

    - name: run tests
      run: cd ./starter/frontend && npm run test

    - name: print message
      run: echo "test build is running"

  buildjob:
    runs-on: ubuntu-latest
    needs: [lintjob, testjob]


    steps:
    - name: checkout code
      uses: actions/checkout@v4.1.7

    - name: setup node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: "./starter/frontend/package-lock.json"

    - name: install depedencies
      run: cd ./starter/frontend && npm ci

    - name: Build Docker image
      run: |
          cd ./starter/frontend &&  docker build -t docker-image .

    - name: print message
      run: echo "test build is running"


  install-build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use Node.js 
      uses: actions/setup-node@v3
      with:
        node-version: ${{env.NODE_VERSION}}
        cache: 'npm'

    - name: Install, Build, Test
      run: | 
        npm ci
        npm run build --if-present
        npm test 

  ecr-login:
    runs-on: ubuntu-latest
    steps:
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: us-east-1

    - name: Amazon ECR "Login" Action for GitHub Actions
      uses: aws-actions/amazon-ecr-login@v2.0.1

    - name: Create CloudFormation Stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: udatest
        template: udatest.yml


  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4
      
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{ env.AWS_REGION }} # Use the region from your environment variables
        
      # Set up the specified version of Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      # Initialize your Terraform configuration
      - name: Terraform Init
        run: terraform init

      # Validate your Terraform configuration
      - name: Terraform Validate
        run: terraform validate 

      # Generate and display an execution plan
      - name: Terraform Plan
        run: terraform plan 

      # Apply the changes required to reach the desired state of the configuration
      - name: Terraform Apply
        run: terraform apply -auto-approve 
