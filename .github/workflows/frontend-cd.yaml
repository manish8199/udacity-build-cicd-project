name: Frontend Continuous Deployment

env:
  REACT_APP_MOVIE_API_URL: 'http://localhost:5000'
  EKS_CLUSTER_NAME: cluster 

on:
  workflow_dispatch:

  push:
    branches:
      -main

  pull_request:
    branches:
      - main

jobs:

  lintjob:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.7
            

    - name: setup node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: "./starter/frontend/package-lock.json"

    - name: install depedencies
      run: cd ./starter/frontend && npm ci

    - name: run lint
      run: cd ./starter/frontend && npm run lint

    - name: print message
      run: echo "lint build is running"

  testjob:
    runs-on: ubuntu-latest

    steps:
    - name: checkout code
      uses: actions/checkout@v4.1.7

    - name: setup node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: "./starter/frontend/package-lock.json"

    - name: install depedencies
      run: cd ./starter/frontend &&  npm ci

    - name: run tests
      run: cd ./starter/frontend && npm run test

    - name: print message
      run: echo "test build is running"

  buildjob:
    runs-on: ubuntu-latest
    needs: [lintjob, testjob]


    steps:
    - name: checkout code
      uses: actions/checkout@v4.1.7

    - name: setup node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: "./starter/frontend/package-lock.json"

    - name: install depedencies
      run: cd ./starter/frontend && npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       # aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: us-east-1
        mask-aws-account-id: false

    - name: Amazon ECR "Login" Action for GitHub Actions
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2.0.1

    - name: Build, tag, and push docker image to Amazon ECR
      env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
      run: |
          echo ${{ steps.login-ecr.outputs.registry }}
          cd ./starter/frontend &&   docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }}  -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Update kube config
      env:
          AWS_REGION: us-east-1
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd ./starter/frontend && sed -i.bak "s|DOCKER_IMAGE|$REGISTRY/$REPOSITORY:$IMAGE_TAG|g" k8s/deployment.yaml && \
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml





 
