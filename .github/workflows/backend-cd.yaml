name: Backend Continuous Deployment

env:
  EKS_CLUSTER_NAME: cluster 
  AWS_REGION: us-east-1

on:
  workflow_dispatch:

  push:
    branches:
      - main

jobs:

  lintjob:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.7
            

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint the code with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics


    - name: print message
      run: echo "lint build is running"

  testjob:
    runs-on: ubuntu-latest

    steps:
    - name: checkout code
      uses: actions/checkout@v4.1.7

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
 

    - name: Test with unittest
      run: cd starter/backend && pipenv install pytest && pipenv run test

  buildjob:
    runs-on: ubuntu-latest
    needs: [lintjob, testjob]


    steps:
    - name: checkout code
      uses: actions/checkout@v4.1.7

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
 

    - name: Test with unittest
      run: |
        python -m unittest discover       

    - name: print message
      run: echo "test build is running"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: us-east-1

    - name: Amazon ECR "Login" Action for GitHub Actions
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2.0.1

    - name: Build, tag, and push docker image to Amazon ECR
      env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
      run: |
          cd ./starter/backend &&   docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Update kube config
      env:
          AWS_REGION: us-east-1
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy to EKS
      working-directory: starter/backend/k8s
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ github.sha }}
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: backend
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
        kustomize edit set image backend=$REGISTRY/$REPO_NAME:$IMAGE_TAG
        kustomize build | kubectl apply -f -





 
